-- Copyright (c) 2020 Rethink Ledgers LLC. All rights reserved.

module Main where

-- what imports are generally recommended ? 

-- import DA.Date as D
-- import DA.Action
--import Registration -- I split Registration into its own file

-- CovidTest19 Template

data Locationstate = NC | SC | GA  | FL  -- Can I use a Map function here ? 
  deriving (Eq, Show)
data Testresult = Positive | Negative | Pending
  deriving (Eq, Show)

data CitizenDetails = CitizenDetails
 with 
      idtype : Text      
      ssn: Text 
      did: Text
      firstname: Text
      lastname: Text
      email: Text
      accept_vcoremail: Text
      hippa_accept: Bool
      insurance_id: Text

       deriving (Eq, Show)




data HealthClinicDetails = HealthClinicDetails
 with 
      id : Text      
      did: Text
      hcname: Text
      hcaddres: Text
      hctel: Text
      hccontactname: Text
      hccontactemail: Text
      hccontacttel: Text

       deriving (Eq, Show)


template Network
  with
   operator : Party
  where
   signatory operator

   controller operator can 
    nonconsuming InviteHealthClinic : ContractId HealthClinicInvitation
      with 
        healthclinic : Party
      do
        create HealthClinicInvitation with healthclinic, operator
    nonconsuming InviteCitizen : ContractId CitizenInvitation
      with 
        citizen : Party
       
      do
        create CitizenInvitation with citizen, operator





template HealthClinicInvitation
  with
    operator : Party
    healthclinic : Party
  where
    signatory operator

    controller healthclinic can
     AcceptInvitation : ContractId HealthClinicRole
        with
        healthclinicdetails : HealthClinicDetails
      do
       create HealthClinicRole with healthclinic, operator, healthclinicdetails

template HealthClinicRole
  with 
    operator : Party
    healthclinic : Party
    healthclinicdetails : HealthClinicDetails
  where
    signatory healthclinic


template CitizenInvitation
  with
    operator : Party
    citizen : Party
  where
    signatory operator

    controller citizen can
     AcceptCitizenInvitation : ContractId CitizenRole
      with
       citizendetails : CitizenDetails

      do
       create CitizenRole with citizen, operator, citizendetails

template CitizenRole
  with 
    operator : Party
    citizen: Party
    citizendetails : CitizenDetails
  where
    signatory citizen

    controller citizen can 
      nonconsuming RequestTest : ContractId TestRequest
        with
          healthclinic: Party

        do
          create TestRequest with healthclinic, citizen 

template TestRequest
  with 
    healthclinic : Party
    citizen: Party
  where
    signatory citizen

    controller healthclinic can 
      ConfirmTestAppointment : ContractId TestAppointment
        with
          appointmentdate : Date 
        do
          create TestAppointment with citizen, healthclinic, appointmentdate

data Covid19TestData = Covid19TestData
 with 
      testdate : Date      
      healthclinic: Party 
      citizen: Party
      statehealth: Party
      testtype: Text
      testnumber: Int
      testresult: Testresult
      locationstate: Locationstate
       deriving (Eq, Show)

template TestAppointment
  with
    healthclinic : Party
    citizen: Party
    appointmentdate : Date

  where
    signatory healthclinic

    controller healthclinic can 
       Covid19TestAppointment : ContractId Covid19Test
        with
          covid19testdata :  Covid19TestData
          statehealth : Party
        do
          create Covid19Test with covid19testdata, healthclinic, statehealth, citizen
        

data ImmunityVC = ImmunityVC
 with
      date : Date      
      did : Text
      vc_schema : Text
      citizen : Party
      statehealth: Party
      vc_message : Text
       deriving (Eq, Show)


template Covid19Test
  with
    covid19testdata : Covid19TestData 
    healthclinic : Party
    citizen : Party
    statehealth : Party

  where
    signatory healthclinic
    observer citizen
    observer statehealth

    controller statehealth can 
       SupplyVC : ContractId SupplyImmunityVC
        with
          immunityvc : ImmunityVC 
        do
          create SupplyImmunityVC with immunityvc, statehealth , citizen


template SupplyImmunityVC
  with
    immunityvc : ImmunityVC 
    statehealth : Party
    citizen : Party
  where
    signatory statehealth
    observer citizen

   
  
{- 
    -- choice UpdateTest : ContractId Covid19Test
   
        -- Here I want to give an opportunity to update a previous specific Contract with new information
        -- How do preserve (and display) previous information and allow for some fields to be updated ?

    -- with 
     --  citizen: Citizen
     --  healthprovider: Party
     --  statehealth: Party
     -- controller healthprovider
    --   do
    --     update Covid19Test with testnumber, healthprovider, citizen, statehealth, testtype, testdate, testresult, locationstate, testupdate

-- This currently creates a compile error
-- Do I need to do a search on Contract ID first  ?


-- sample code from Broadcast.daml example




-- Quarantine Template


data QuarantineType = Mandatory | Optional
  deriving (Eq, Show)  -- what is the difference if I add Ord to this ?
  -- I wanted to add option for "14DayMandatory" but the parser identified this as a problem


type QuarantineKey = ( Party, Party, Int )


template Quarantine
  with
     quarantineordernumber: Int
     quarantinetype: QuarantineType
     issuedate: Date
     statehealth: Party
     citizen: Party
     enddate: Date  -- I want to add 14 days to the current date
     reason: Text
     location: Locationstate
     trackingID: Text
  where
    signatory statehealth
    observer citizen

    -- agreement that describes a state agency orders a specific Quarantine for a citizen who has tested positive

    key (statehealth, citizen, quarantineordernumber) : QuarantineKey
    maintainer key._1


    choice InitiateQuarantine : ( ContractId Quarantine)
     with
    --  citizen : Party
    --  statehealth : Party

     controller statehealth
      do
          create Quarantine with quarantineordernumber, issuedate, statehealth ,quarantinetype, citizen, enddate,  reason,  location, trackingID
        
  

-- The following section is intended for the Party (Citizen) to self record some information about them selves that could be useful in the rest of the application
-- Again this will need to allow for an initial creation and update function


template CitizenRegistration
  with
    citizen: Party
    citizenSSID : Text
    citizenVC : Text
    citizenfirstname : Text
    citizenlastname : Text
    citizenSSN : Text
    citizeninsuranceid : Text
    citizeninsurance : Party
    citizenlocationid : Text
  where
    signatory citizen
  
    key (citizen, citizenSSN) :  ( Party, Text )
    maintainer key._1

    choice InitiateCitizenRegistration :  ContractId CitizenRegistration 
     with
   --   citizen : Party

     controller citizen
       do
        create CitizenRegistration with citizen,  citizenSSID,  citizenVC, citizenfirstname, citizenlastname,  citizenSSN, citizeninsuranceid, citizeninsurance, citizenlocationid
          
    

   -- choice UpdateRegistration : ContractId CitizenRegistration
   --    with
    --   citizen : Party

   --   controller citizen
   --     do
        -- Link here to Registration Daml
        --  update CitizenRegistration with citizen;  citizenSSID;  citizenVC;  citizenfirstname ; citizenlastname;  citizenSSN ; citizeninsuranceid; citizeninsurance ; citizenlocationid
          
        --  return (CitizenRegistration)



-- I want to setup the following scenarios:


-- 0. All parties get initialized
-- 1. Citizen submits Self Party Information
-- 2. Health Provider submits Covid19 test
-- 3. Health Provider updates Covid19 test to "Positive"
-- 4. State Agency creates Immunity Proof "Positive"
-- 5. State Agency creates Quarantine Notice
-- 6. State Agency lifts Qurantine Notice
-- 7. State Agency creates Immunity Proof "Negative"


-- Scenario 2 : 
setup = scenario do
  operator <- getParty "Operator"
  atriumhealth <- getParty "AtriumHealth"
  alice <- getParty "Alice"
  submit operator do
    create HealthClinicInvitation with healthclinic = atriumhealth , operator 
  submit operator do
    create CitizenInvitation with citizen = alice , operator 

 -}