-- Copyright (c) 2020 Rethink Ledgers LLC. All rights reserved.

module Main where

data Locationstate = NC | SC | GA  | FL 
  deriving (Eq, Show)

data Testresult = Positive | Negative | Pending
  deriving (Eq, Show)

data Roletype = Citizen | HealthClinic | StateHealthAgency | InsuranceCompany
  deriving (Eq, Show)

data CitizenDetails = CitizenDetails
 with 
      idtype : Text      
      id : Text 
      firstname: Text
      lastname: Text
      email: Text
      accept_vcoremail: Text
      hippa_accept: Bool
      insurance_id: Text

       deriving (Eq, Show)


data VerifiableCredentials = VerifiableCredentials
  with
      connectionid : Text
      holder_did : Text
      issuer_did : Text

        deriving (Eq, Show)
      

data HealthClinicDetails = HealthClinicDetails
 with 
      id : Text      
      did: Text
      hcname: Text
      hcaddress: Text
      hctel: Text
      hccontactname: Text
      hccontactemail: Text
      hccontacttel: Text

       deriving (Eq, Show)


template Network
  with
   operator : Party
  where
   signatory operator

   controller operator can 
    nonconsuming InviteHealthClinic : ContractId HealthClinicInvitation
      with 
        healthclinic : Party
        roletype : Roletype
      do
        create HealthClinicInvitation with healthclinic, operator, roletype
    nonconsuming InviteCitizen : ContractId CitizenInvitation
      with 
        citizen : Party
        roletype : Roletype

      do
        create CitizenInvitation with citizen, operator, roletype





template HealthClinicInvitation
  with
    operator : Party
    healthclinic : Party
    roletype : Roletype
  where
    signatory operator

    controller healthclinic can
     AcceptInvitation : ContractId HealthClinicRole
        with
        healthclinicdetails : HealthClinicDetails
      do
       create HealthClinicRole with healthclinic, operator, healthclinicdetails




template HealthClinicRole
  with 
    operator : Party
    healthclinic : Party
    healthclinicdetails : HealthClinicDetails
  where
    signatory healthclinic

    controller healthclinic can
     UpdateRegistration : ContractId HealthClinicRole
        with
        newhealthclinicdetails : HealthClinicDetails
      do
       create this with 
        healthclinic = healthclinic
        operator = operator
        healthclinicdetails = newhealthclinicdetails




template CitizenInvitation
  with
    operator : Party
    citizen : Party
    roletype : Roletype
  where
    signatory operator

    controller citizen can
     nonconsuming AcceptCitizenInvitation : ContractId CitizenRole
      with
       citizendetails : CitizenDetails
       verifiablecredentials : VerifiableCredentials

      do
       create CitizenRole with citizen, operator, citizendetails, verifiablecredentials

     

template CitizenRole
  with 
    operator : Party
    citizen: Party
    citizendetails : CitizenDetails
    verifiablecredentials : VerifiableCredentials
  where
    signatory citizen

    key citizen : Party
    maintainer key

    controller citizen can 
      nonconsuming RequestTest : ContractId TestRequest
        with
          healthclinic: Party

        do
          create TestRequest with healthclinic, citizen 

      nonconsuming UpdateCitizenRegistration : ContractId CitizenRole
        with
         newcitizendetails : CitizenDetails
        
        do  
          (citizenRoleCid, oldCitizenRole) <- fetchByKey @CitizenRole (citizen)
          archive citizenRoleCid
    
          create CitizenRole with citizen = key oldCitizenRole; citizendetails = newcitizendetails ; operator = operator ; verifiablecredentials = oldCitizenRole.verifiablecredentials
        
      nonconsuming SetVerifiableCredentials : ContractId CitizenRole
        with
          newverifiablecredentials : VerifiableCredentials
          
        do  
          archive self
          create this with verifiablecredentials = newverifiablecredentials
      

     
          
      
template StateHealthInvitation
  with
    operator : Party
    statehealth : Party
    roletype : Roletype
  where
    signatory operator

    controller statehealth can
     AcceptStateHealthInvitation : ContractId StateHealthRole

      do
       create StateHealthRole with statehealth, operator, roletype


template StateHealthRole
  with 
    operator : Party
    statehealth : Party
    roletype : Roletype
  where
    signatory statehealth

      
template InsuranceInvitation
  with
    operator : Party
    insurancecompany : Party
    roletype : Roletype
  where
    signatory operator

    controller insurancecompany can
     AcceptInsuranceCompanyInvitation : ContractId InsuranceCompanyRole

      do
       create InsuranceCompanyRole with insurancecompany, operator, roletype



template InsuranceCompanyRole
  with 
    operator : Party
    insurancecompany : Party
    roletype : Roletype
  where
    signatory insurancecompany


template TestRequest
  with 
    healthclinic : Party
    citizen: Party
  where
    signatory citizen

    controller healthclinic can 
      nonconsuming ConfirmTestAppointment : ContractId TestAppointment
        with
          appointmentdate : Date 
        do
          create TestAppointment with citizen, healthclinic, appointmentdate

data Covid19TestData = Covid19TestData
 with 
      testdate : Date      
      healthclinic: Party 
      citizen: Party
      statehealth: Party
      testtype: Text
      testnumber: Int
      testresult: Testresult
      locationstate: Locationstate
       deriving (Eq, Show)

template TestAppointment
  with
    healthclinic : Party
    citizen: Party
    appointmentdate : Date

  where
    signatory healthclinic

    controller healthclinic can 
      nonconsuming Covid19TestAppointment : ContractId Covid19Test
        with
          covid19testdata :  Covid19TestData
          statehealth : Party
        do
          create Covid19Test with covid19testdata, healthclinic, statehealth, citizen
        

data ImmunityVC = ImmunityVC
 with
      date : Date      
      did : Text
      vc_schema : Text
      citizen : Party
      statehealth: Party
      vc_message : Text
       deriving (Eq, Show)


template Covid19Test
  with
    covid19testdata : Covid19TestData 
    healthclinic : Party
    citizen : Party
    statehealth : Party

  where
    signatory healthclinic
    observer citizen
    observer statehealth

    controller statehealth can 
       nonconsuming SupplyVC : ContractId SupplyImmunityVC
        with
          immunityvc : ImmunityVC 
        do
          create SupplyImmunityVC with immunityvc, statehealth , citizen


template SupplyImmunityVC
  with
    immunityvc : ImmunityVC 
    statehealth : Party
    citizen : Party
  where
    signatory statehealth
    observer citizen

   
  
{- 
    -- choice UpdateTest : ContractId Covid19Test
   
        -- Here I want to give an opportunity to update a previous specific Contract with new information
        -- How do preserve (and display) previous information and allow for some fields to be updated ?

    -- with 
     --  citizen: Citizen
     --  healthprovider: Party
     --  statehealth: Party
     -- controller healthprovider
    --   do
    --     update Covid19Test with testnumber, healthprovider, citizen, statehealth, testtype, testdate, testresult, locationstate, testupdate

-- This currently creates a compile error
-- Do I need to do a search on Contract ID first  ?




-- I want to setup the following scenarios:


-- 0. All parties get initialized
-- 1. Citizen submits Self Party Information
-- 2. Health Provider submits Covid19 test
-- 3. Health Provider updates Covid19 test to "Positive"
-- 4. State Agency creates Immunity Proof "Positive"
-- 5. State Agency creates Quarantine Notice
-- 6. State Agency lifts Qurantine Notice
-- 7. State Agency creates Immunity Proof "Negative"
-}

setup = scenario do
  operator <- getParty "Operator"
  atriumhealth <- getParty "AtriumHealth"
  alice <- getParty "Alice"

  submit operator do
    create HealthClinicInvitation with healthclinic = atriumhealth ; operator = operator ; roletype = HealthClinic
  submit operator do
    create CitizenInvitation with citizen = alice ; operator = operator ; roletype = Citizen

  let citizendetails = CitizenDetails with idtype = "text" ; id= ""; firstname = "John" ;  lastname =  "Doe"; email = "john.doe@email.com" ; accept_vcoremail = "vc"; hippa_accept =  True;insurance_id = ""
  let verifiablecredentials = VerifiableCredentials with connectionid ="" ; holder_did = "", issuer_did = ""
  submit alice do
    create CitizenRole with  citizen = alice ; operator = operator ; citizendetails = citizendetails ; verifiablecredentials = verifiablecredentials


