
module Registration where

data CitizenInfo = CitizenInfo with
  citizendetail1 : Text
  citizendetail2 : Text
  citizendetail3 : Text
   deriving (Eq, Show)

data CitizenKey = CitizenKey with
  citizen : Party
  id : Text
   deriving (Eq, Show)


template CitizenRegistration
  with
    registrationCid : CitizenKey
    registrationData : CitizenInfo
  where
    signatory registrationCid.citizen

    key registrationCid : CitizenKey
    maintainer key.citizen

    controller registrationCid.citizen can 
      nonconsuming Register : ContractId CitizenRegistration with
        newRegistrationCid : CitizenKey
        newRegistrationData : CitizenInfo
       do
        create CitizenRegistration with
          registrationCid = newRegistrationCid
          registrationData = newRegistrationData
   

      nonconsuming UpdateRegistration : ContractId CitizenRegistration with
          newCitizenDetails : CitizenInfo
       do
         (oldRegistrationCid, oldRegistrationData) <- fetchByKey @CitizenRegistration (key this)
         archive oldRegistrationCid
         create CitizenRegistration with 
            registrationCid = key oldRegistrationData
            registrationData = newCitizenDetails

template AliasCitizen
  with
    citizen : Party  -- user's party identifier
    alias : Text  -- user's preferred public name
  where
    signatory  citizen
    observer healthclinic, statehealth, operator
    key citizen : Party
    maintainer key
    controller citizen can
      nonconsuming SetAlias : ContractId AliasCitizen with
         citizen : Party
         alias : Text
       do
         create AliasCitizen with ..
          
  
example = scenario do
  alice <- getParty "Alice"
  bob <- getParty "Bob"

  let citizenkey = CitizenKey with citizen = bob ; id = "2" 
  let citizeninfo = CitizenInfo with  citizendetail1 = "Text1" ; citizendetail2 ="Text2" ; citizendetail3 = "Text3" 
        
  bobregistration <- submit bob do 
    create CitizenRegistration with 
        registrationCid = citizenkey; registrationData = citizeninfo
      
  let citizenkey = CitizenKey with citizen = alice ; id = "1"
  let citizeninfo = CitizenInfo with  citizendetail1 = "Text1" ; citizendetail2 ="Text2" ; citizendetail3 = "Text3" 
      
  aliceregistration <- submit alice do 
    create CitizenRegistration with registrationCid = citizenkey; registrationData = citizeninfo

  (oldRegistrationCid, oldRegistrationData) <- submit alice do fetchByKey @CitizenRegistration (citizenkey)

  let citizenkey = key oldRegistrationData
  let newCitizenDetails = CitizenInfo with citizendetail1 = "UpdatedText1" ; citizendetail2 ="UpdatedText2" ; citizendetail3 = "UpdatedText3" 

  aliceupdate <- submit alice do
    exercise UpdateRegistration with 
      registrationCid = citizenkey ; registrationData = newCitizenDetails
  return (aliceregistration,bobregistration,aliceupdate)

 


