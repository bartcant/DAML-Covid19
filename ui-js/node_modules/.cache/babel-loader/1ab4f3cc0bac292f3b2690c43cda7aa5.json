{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bartc\\\\Documents\\\\Github\\\\DAML-Covid19\\\\ui-js\\\\src\\\\components\\\\Sidebar\\\\Sidebar.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Drawer, IconButton, List } from \"@material-ui/core\";\nimport { Home, List as ListIcon, ArrowBack } from \"@material-ui/icons\";\nimport { useTheme } from \"@material-ui/styles\";\nimport { withRouter } from \"react-router-dom\";\nimport classNames from \"classnames\";\nimport useStyles from \"./styles\";\nimport SidebarLink from \"./components/SidebarLink/SidebarLink\";\nimport { useLayoutState, useLayoutDispatch, toggleSidebar } from \"../../context/LayoutContext\";\n\nfunction Sidebar({\n  location\n}) {\n  var classes = useStyles();\n  var theme = useTheme(); // global\n\n  var {\n    isSidebarOpened\n  } = useLayoutState();\n  var layoutDispatch = useLayoutDispatch(); // local\n\n  var [isPermanent, setPermanent] = useState(true);\n  useEffect(function () {\n    window.addEventListener(\"resize\", handleWindowWidthChange);\n    handleWindowWidthChange();\n    return function cleanup() {\n      window.removeEventListener(\"resize\", handleWindowWidthChange);\n    };\n  });\n  return /*#__PURE__*/React.createElement(Drawer, {\n    variant: isPermanent ? \"permanent\" : \"temporary\",\n    className: classNames(classes.drawer, {\n      [classes.drawerOpen]: isSidebarOpened,\n      [classes.drawerClose]: !isSidebarOpened\n    }),\n    classes: {\n      paper: classNames({\n        [classes.drawerOpen]: isSidebarOpened,\n        [classes.drawerClose]: !isSidebarOpened\n      })\n    },\n    open: isSidebarOpened,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.toolbar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.mobileBackButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    onClick: () => toggleSidebar(layoutDispatch),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ArrowBack, {\n    classes: {\n      root: classNames(classes.headerIcon, classes.headerIconCollapse)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(List, {\n    className: classes.sidebarList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(SidebarLink, {\n    key: \"default\",\n    label: \"Default\",\n    path: \"/app/default\",\n    icon: /*#__PURE__*/React.createElement(Home, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 18\n      }\n    }),\n    location: location,\n    isSidebarOpened: isSidebarOpened,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(SidebarLink, {\n    key: \"Report\",\n    label: \"Report\",\n    path: \"/app/report\",\n    icon: /*#__PURE__*/React.createElement(ListIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 18\n      }\n    }),\n    location: location,\n    isSidebarOpened: isSidebarOpened,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }))); // ##################################################################\n\n  function handleWindowWidthChange() {\n    var windowWidth = window.innerWidth;\n    var breakpointWidth = theme.breakpoints.values.md;\n    var isSmallScreen = windowWidth < breakpointWidth;\n\n    if (isSmallScreen && isPermanent) {\n      setPermanent(false);\n    } else if (!isSmallScreen && !isPermanent) {\n      setPermanent(true);\n    }\n  }\n}\n\nexport default withRouter(Sidebar);","map":{"version":3,"sources":["C:/Users/bartc/Documents/Github/DAML-Covid19/ui-js/src/components/Sidebar/Sidebar.js"],"names":["React","useState","useEffect","Drawer","IconButton","List","Home","ListIcon","ArrowBack","useTheme","withRouter","classNames","useStyles","SidebarLink","useLayoutState","useLayoutDispatch","toggleSidebar","Sidebar","location","classes","theme","isSidebarOpened","layoutDispatch","isPermanent","setPermanent","window","addEventListener","handleWindowWidthChange","cleanup","removeEventListener","drawer","drawerOpen","drawerClose","paper","toolbar","mobileBackButton","root","headerIcon","headerIconCollapse","sidebarList","windowWidth","innerWidth","breakpointWidth","breakpoints","values","md","isSmallScreen"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Drawer, IconButton, List } from \"@material-ui/core\";\nimport { Home, List as ListIcon, ArrowBack } from \"@material-ui/icons\";\nimport { useTheme } from \"@material-ui/styles\";\nimport { withRouter } from \"react-router-dom\";\nimport classNames from \"classnames\";\nimport useStyles from \"./styles\";\nimport SidebarLink from \"./components/SidebarLink/SidebarLink\";\nimport { useLayoutState, useLayoutDispatch, toggleSidebar } from \"../../context/LayoutContext\";\n\nfunction Sidebar({ location }) {\n  var classes = useStyles();\n  var theme = useTheme();\n\n  // global\n  var { isSidebarOpened } = useLayoutState();\n  var layoutDispatch = useLayoutDispatch();\n\n  // local\n  var [isPermanent, setPermanent] = useState(true);\n\n  useEffect(function() {\n    window.addEventListener(\"resize\", handleWindowWidthChange);\n    handleWindowWidthChange();\n    return function cleanup() {\n      window.removeEventListener(\"resize\", handleWindowWidthChange);\n    };\n  });\n\n  return (\n    <Drawer\n      variant={isPermanent ? \"permanent\" : \"temporary\"}\n      className={classNames(classes.drawer, {\n        [classes.drawerOpen]: isSidebarOpened,\n        [classes.drawerClose]: !isSidebarOpened,\n      })}\n      classes={{\n        paper: classNames({\n          [classes.drawerOpen]: isSidebarOpened,\n          [classes.drawerClose]: !isSidebarOpened,\n        }),\n      }}\n      open={isSidebarOpened}\n    >\n      <div className={classes.toolbar} />\n      <div className={classes.mobileBackButton}>\n        <IconButton onClick={() => toggleSidebar(layoutDispatch)}>\n          <ArrowBack\n            classes={{\n              root: classNames(classes.headerIcon, classes.headerIconCollapse),\n            }}\n          />\n        </IconButton>\n      </div>\n      <List className={classes.sidebarList}>\n        <SidebarLink\n          key=\"default\"\n          label=\"Default\"\n          path=\"/app/default\"\n          icon={(<Home />)}\n          location={location}\n          isSidebarOpened={isSidebarOpened}\n        />\n        <SidebarLink\n          key=\"Report\"\n          label=\"Report\"\n          path=\"/app/report\"\n          icon={(<ListIcon />)}\n          location={location}\n          isSidebarOpened={isSidebarOpened}\n        />\n      </List>\n    </Drawer>\n  );\n\n  // ##################################################################\n  function handleWindowWidthChange() {\n    var windowWidth = window.innerWidth;\n    var breakpointWidth = theme.breakpoints.values.md;\n    var isSmallScreen = windowWidth < breakpointWidth;\n\n    if (isSmallScreen && isPermanent) {\n      setPermanent(false);\n    } else if (!isSmallScreen && !isPermanent) {\n      setPermanent(true);\n    }\n  }\n}\n\nexport default withRouter(Sidebar);\n"]},"metadata":{},"sourceType":"module"}