{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bartc\\\\Documents\\\\Github\\\\DAML-Covid19\\\\ui-js\\\\src\\\\components\\\\Contracts\\\\Contracts.js\";\nimport React, { useState } from \"react\";\nimport ReactJson from \"react-json-view\";\nimport { Grid, Table, TableHead, TableRow, TableCell, TableBody, TextField, Button } from \"@material-ui/core\";\nimport { useStyles } from \"./styles\";\nexport default function Contracts({\n  contracts,\n  columns,\n  actions = []\n}) {\n  actions = actions ? actions : [];\n  const isDefault = !columns;\n  columns = columns ? columns : [[\"TemplateId\", \"templateId\"], [\"ContractId\", \"contractId\"]];\n  const classes = useStyles();\n  var [state, setState] = useState({});\n\n  const handleChange = name => event => {\n    setState({ ...state,\n      [name]: event.target.value\n    });\n  };\n\n  function getByPath(data, path) {\n    if (path.length === 0) return data;\n    if (data[path[0]] === undefined) throw new Error(\"Object doesn't have key '\" + path[0] + \"': \" + JSON.stringify(data));\n    const value = getByPath(data[path[0]], path.slice(1));\n    return value;\n  }\n\n  function getValue(data, path) {\n    const split = typeof path === \"string\" && path !== \"\" ? path.split(\".\") : [];\n    return getByPath(data, split);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    className: classes.tableRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }, columns.map(col => /*#__PURE__*/React.createElement(TableCell, {\n    className: classes.tableCell,\n    key: col[0],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 40\n    }\n  }, col[0])), isDefault ? /*#__PURE__*/React.createElement(TableCell, {\n    className: classes.tableCell,\n    key: \"payload\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 40\n    }\n  }, \"Payload\") : /*#__PURE__*/React.createElement(React.Fragment, null), actions.map(action => /*#__PURE__*/React.createElement(TableCell, {\n    className: classes.tableCell,\n    key: action[0],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 40\n    }\n  }, action[0])))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }\n  }, contracts.map((c, i) => /*#__PURE__*/React.createElement(TableRow, {\n    key: i,\n    className: classes.tableRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 15\n    }\n  }, columns.map(col => /*#__PURE__*/React.createElement(TableCell, {\n    key: col[0],\n    className: classes.tableCell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 39\n    }\n  }, getValue(c, col[1]))), isDefault ? /*#__PURE__*/React.createElement(TableCell, {\n    key: \"payload\",\n    className: classes.tableCell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 24\n    }\n  }, /*#__PURE__*/React.createElement(ReactJson, {\n    src: c.payload,\n    name: false,\n    collapsed: true,\n    enableClipboard: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 25\n    }\n  })) : /*#__PURE__*/React.createElement(React.Fragment, null), actions.map(action => /*#__PURE__*/React.createElement(TableCell, {\n    key: action[0],\n    className: classes.tableCell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 19\n    }\n  }, action.length > 2 ? /*#__PURE__*/React.createElement(TextField, {\n    InputProps: {\n      classes: {\n        underline: classes.textFieldUnderline,\n        input: classes.textField\n      }\n    },\n    onChange: handleChange(action[2]),\n    onKeyDown: e => {\n      if (e.key === \"Enter\") {\n        action[1](c, state[action[2]]);\n        e.target.value = \"\";\n      }\n    },\n    placeholder: action[2],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 27\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null), /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    size: \"small\",\n    className: \"px-2\",\n    variant: \"contained\",\n    onClick: () => action[1](c, state[action[2]]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 23\n    }\n  }, action[0]))))))))));\n}","map":{"version":3,"sources":["C:/Users/bartc/Documents/Github/DAML-Covid19/ui-js/src/components/Contracts/Contracts.js"],"names":["React","useState","ReactJson","Grid","Table","TableHead","TableRow","TableCell","TableBody","TextField","Button","useStyles","Contracts","contracts","columns","actions","isDefault","classes","state","setState","handleChange","name","event","target","value","getByPath","data","path","length","undefined","Error","JSON","stringify","slice","getValue","split","tableRow","map","col","tableCell","action","c","i","payload","underline","textFieldUnderline","input","textField","e","key"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport ReactJson from \"react-json-view\";\nimport { Grid, Table, TableHead, TableRow, TableCell, TableBody, TextField, Button } from \"@material-ui/core\";\nimport { useStyles } from \"./styles\";\n\nexport default function Contracts({ contracts, columns, actions=[] }) {\n\n  actions = actions ? actions : [];\n  const isDefault = !columns;\n  columns = columns ? columns : [ [ \"TemplateId\", \"templateId\" ], [ \"ContractId\", \"contractId\" ] ];\n\n  const classes = useStyles();\n  var [state, setState] = useState({});\n  const handleChange = name => (event => { setState({ ...state, [name]: event.target.value }); });\n\n  function getByPath(data, path) {\n    if (path.length === 0) return data;\n    if (data[path[0]] === undefined) throw new Error(\"Object doesn't have key '\" + path[0] + \"': \" + JSON.stringify(data));\n    const value = getByPath(data[path[0]], path.slice(1));\n    return value;\n  }\n\n  function getValue(data, path) {\n    const split = typeof path === \"string\" && path !== \"\" ? path.split(\".\") : [];\n    return getByPath(data, split);\n  }\n\n  return (\n    <>\n      <Grid container spacing={4}>\n      <Grid item xs={12}>\n        <Table size=\"small\">\n          <TableHead>\n            <TableRow className={classes.tableRow}>\n              { columns.map(col =>    (<TableCell className={classes.tableCell} key={col[0]}>{col[0]}</TableCell>)) }\n              { isDefault ?           (<TableCell className={classes.tableCell} key=\"payload\">Payload</TableCell>) : <></>}\n              { actions.map(action => (<TableCell className={classes.tableCell} key={action[0]}>{action[0]}</TableCell>)) }\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {contracts.map((c, i) => (\n              <TableRow key={i} className={classes.tableRow}>\n                { columns.map(col => (<TableCell key={col[0]} className={classes.tableCell}>{getValue(c, col[1])}</TableCell>)) }\n                { isDefault\n                    ? (<TableCell key=\"payload\" className={classes.tableCell}>\n                        <ReactJson src={c.payload} name={false} collapsed={true} enableClipboard={false}/>\n                      </TableCell>)\n                    : <></> }\n                { actions.map(action => (\n                  <TableCell key={action[0]} className={classes.tableCell}>\n                      { action.length > 2\n                        ? <TextField\n                            InputProps={{ classes: { underline: classes.textFieldUnderline, input: classes.textField } }}\n                            onChange={handleChange(action[2])}\n                            onKeyDown={e => {\n                              if (e.key === \"Enter\") {\n                                action[1](c, state[action[2]]);\n                                e.target.value = \"\";\n                              }\n                            }}\n                            placeholder={action[2]}\n                          />\n                        : <></> }\n                      <Button\n                        color=\"primary\"\n                        size=\"small\"\n                        className=\"px-2\"\n                        variant=\"contained\"\n                        onClick={() => action[1](c, state[action[2]])}\n                      >\n                        {action[0]}\n                      </Button>\n                    </TableCell>)\n                )}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}