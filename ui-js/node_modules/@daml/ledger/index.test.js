"use strict";
// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = __importDefault(require("./index"));
var jtv = __importStar(require("@mojotech/json-type-validation"));
var jest_mock_console_1 = __importDefault(require("jest-mock-console"));
var mockLive = jest.fn();
var mockChange = jest.fn();
var mockConstructor = jest.fn();
var mockSend = jest.fn();
var mockFunctions = [mockLive, mockChange, mockConstructor, mockSend];
var fooKey = 'fooKey';
var mockInstance = undefined;
jest.mock('isomorphic-ws', function () { return /** @class */ (function () {
    function class_1() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        mockConstructor.apply(void 0, args);
        mockInstance = this;
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        var EventEmitter = require('events').EventEmitter;
        this.eventEmitter = new EventEmitter();
    }
    class_1.prototype.addEventListener = function (event, handler) {
        this.eventEmitter.on(event, handler);
    };
    class_1.prototype.send = function (message) {
        mockSend(JSON.parse(message));
    };
    class_1.prototype.serverOpen = function () {
        this.eventEmitter.emit('open');
    };
    class_1.prototype.serverSend = function (message) {
        this.eventEmitter.emit('message', { data: JSON.stringify(message) });
    };
    class_1.prototype.serverClose = function (event) {
        this.eventEmitter.emit('close', event);
    };
    return class_1;
}()); });
var Foo = {
    templateId: "foo-id",
    keyDecoder: function () { return jtv.string(); },
    decoder: function () { return jtv.object({ key: jtv.string() }); },
    Archive: {},
};
var fooCreateEvent = function (coid) {
    return {
        templateId: "foo-id",
        contractId: coid.toString(),
        signatories: [],
        observers: [],
        agreementText: "fooAgreement",
        key: fooKey,
        payload: { key: fooKey },
    };
};
var fooEvent = function (coid) {
    return { created: fooCreateEvent(coid) };
};
var fooArchiveEvent = function (coid) {
    return {
        archived: {
            templateId: "foo-id",
            contractId: coid.toString(),
        },
    };
};
var mockOptions = {
    token: "dummyToken",
    httpBaseUrl: "http://localhost:5000/",
    wsBaseUrl: "ws://localhost:4000/",
};
beforeEach(function () {
    mockFunctions.forEach(function (f) { return f.mockClear(); });
});
describe("streamQuery", function () {
    test("receive unknown message", function () {
        var ledger = new index_1.default(mockOptions);
        var stream = ledger.streamQuery(Foo);
        expect(mockConstructor).toHaveBeenCalledTimes(1);
        expect(mockConstructor).toHaveBeenLastCalledWith('ws://localhost:4000/v1/stream/query', ['jwt.token.dummyToken', 'daml.ws.auth']);
        stream.on("change", mockChange);
        mockInstance.serverOpen();
        expect(mockSend).toHaveBeenCalledTimes(1);
        expect(mockSend).toHaveBeenLastCalledWith({ templateIds: [Foo.templateId] });
        var restoreConsole = jest_mock_console_1.default();
        mockInstance.serverSend('mickey mouse');
        expect(console.error).toHaveBeenCalledWith("Ledger.streamQuery unknown message", "mickey mouse");
        restoreConsole();
    });
    test("receive warnings", function () {
        var ledger = new index_1.default(mockOptions);
        var stream = ledger.streamQuery(Foo);
        stream.on("change", mockChange);
        var restoreConsole = jest_mock_console_1.default();
        mockInstance.serverSend({ warnings: ["oh oh"] });
        expect(console.warn).toHaveBeenCalledWith("Ledger.streamQuery warnings", { "warnings": ["oh oh"] });
        restoreConsole();
    });
    test("receive errors", function () {
        var ledger = new index_1.default(mockOptions);
        var stream = ledger.streamQuery(Foo);
        stream.on("change", mockChange);
        var restoreConsole = jest_mock_console_1.default();
        mockInstance.serverSend({ errors: ["not good!"] });
        expect(console.error).toHaveBeenCalledWith("Ledger.streamQuery errors", { errors: ["not good!"] });
        restoreConsole();
    });
    test("receive live event", function () {
        var ledger = new index_1.default(mockOptions);
        var stream = ledger.streamQuery(Foo);
        stream.on("live", mockLive);
        stream.on("change", function (state) { return mockChange(state); });
        mockInstance.serverSend({ events: [fooEvent(1)], offset: '3' });
        expect(mockLive).toHaveBeenCalledTimes(1);
        expect(mockLive).toHaveBeenLastCalledWith([fooCreateEvent(1)]);
        expect(mockChange).toHaveBeenCalledTimes(1);
        expect(mockChange).toHaveBeenLastCalledWith([fooCreateEvent(1)]);
    });
    test("receive empty events", function () {
        var ledger = new index_1.default(mockOptions);
        var stream = ledger.streamQuery(Foo);
        stream.on("change", function (state) { return mockChange(state); });
        mockInstance.serverSend({ events: [] });
        expect(mockChange).toHaveBeenCalledTimes(0);
    });
    test("receive one event", function () {
        var ledger = new index_1.default(mockOptions);
        var stream = ledger.streamQuery(Foo);
        stream.on("change", function (state) { return mockChange(state); });
        mockInstance.serverSend({ events: [fooEvent(1)] });
        expect(mockChange).toHaveBeenCalledTimes(1);
        expect(mockChange).toHaveBeenLastCalledWith([fooCreateEvent(1)]);
    });
    test("receive several events", function () {
        var ledger = new index_1.default(mockOptions);
        var stream = ledger.streamQuery(Foo);
        stream.on("change", function (state) { return mockChange(state); });
        mockInstance.serverSend({ events: [1, 2, 3].map(fooEvent) });
        expect(mockChange).toHaveBeenCalledTimes(1);
        expect(mockChange).toHaveBeenCalledWith([1, 2, 3].map(fooCreateEvent));
    });
    test("drop matching created and archived events", function () {
        var ledger = new index_1.default(mockOptions);
        var stream = ledger.streamQuery(Foo);
        stream.on("change", function (state) { return mockChange(state); });
        mockInstance.serverSend({ events: [fooEvent(1), fooEvent(2)] });
        expect(mockChange).toHaveBeenCalledTimes(1);
        expect(mockChange).toHaveBeenCalledWith([fooCreateEvent(1), fooCreateEvent(2)]);
        mockChange.mockClear();
        mockInstance.serverSend({ events: [fooArchiveEvent(1)] });
        expect(mockChange).toHaveBeenCalledTimes(1);
        expect(mockChange).toHaveBeenCalledWith([fooCreateEvent(2)]);
    });
});
describe("streamFetchByKey", function () {
    test("receive no event", function () {
        var ledger = new index_1.default(mockOptions);
        var stream = ledger.streamFetchByKey(Foo, 'badKey');
        stream.on("change", function (state) { return mockChange(state); });
        mockInstance.serverSend({ events: [] });
        expect(mockChange).toHaveBeenCalledTimes(0);
    });
    test("receive one event", function () {
        var ledger = new index_1.default(mockOptions);
        var stream = ledger.streamFetchByKey(Foo, fooKey);
        stream.on("change", function (state) { return mockChange(state); });
        mockInstance.serverSend({ events: [fooEvent(1)] });
        expect(mockChange).toHaveBeenCalledTimes(1);
        expect(mockChange).toHaveBeenCalledWith(fooCreateEvent(1));
    });
    test("receive several events", function () {
        var ledger = new index_1.default(mockOptions);
        var stream = ledger.streamFetchByKey(Foo, fooKey);
        stream.on("change", function (state) { return mockChange(state); });
        mockInstance.serverSend({ events: [fooEvent(1), fooEvent(2), fooEvent(3)] });
        expect(mockChange).toHaveBeenCalledTimes(1);
        expect(mockChange).toHaveBeenCalledWith(fooCreateEvent(3));
    });
    test("drop matching created and archived events", function () {
        var ledger = new index_1.default(mockOptions);
        var stream = ledger.streamFetchByKey(Foo, fooKey);
        stream.on("change", function (state) { return mockChange(state); });
        mockInstance.serverSend({ events: [fooEvent(1)] });
        expect(mockChange).toHaveBeenCalledTimes(1);
        expect(mockChange).toHaveBeenCalledWith(fooCreateEvent(1));
        mockChange.mockClear();
        mockInstance.serverSend({ events: [fooArchiveEvent(1)] });
        expect(mockChange).toHaveBeenCalledTimes(1);
        expect(mockChange).toHaveBeenCalledWith(null);
    });
});
//# sourceMappingURL=index.test.js.map