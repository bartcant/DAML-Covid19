"use strict";
// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
var context_1 = require("./context");
// NOTE(MH, useEffect dependencies): There are various places in this file
// where we need to maintain the dependencies of the `useEffect` hook manually
// and there's no tool to help us enfore they are correct. Thus, we need to be
// extra careful in these locations. If we add too many dependencies, we will
// make unnecessary network requests. If we forget adding some dependencies, we
// not make a new network request although they are required to refresh data.
/**
 * @internal
 */
var useDamlState = function () {
    var state = react_1.useContext(context_1.DamlLedgerContext);
    if (!state) {
        throw Error("Trying to use DamlLedgerContext before initializing.");
    }
    return state;
};
/**
 * React hook to get the party currently connected to the ledger.
 */
exports.useParty = function () {
    var state = useDamlState();
    return state.party;
};
/**
 * React Hook that returns the Ledger instance to interact with the connected DAML ledger.
 */
exports.useLedger = function () {
    return useDamlState().ledger;
};
function useQuery(template, queryFactory, queryDeps) {
    var _this = this;
    var state = useDamlState();
    var _a = react_1.useState({ contracts: [], loading: false }), result = _a[0], setResult = _a[1];
    react_1.useEffect(function () {
        setResult({ contracts: [], loading: true });
        var query = queryFactory ? queryFactory() : undefined;
        var load = function () { return __awaiter(_this, void 0, void 0, function () {
            var contracts;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, state.ledger.query(template, query)];
                    case 1:
                        contracts = _a.sent();
                        setResult({ contracts: contracts, loading: false });
                        return [2 /*return*/];
                }
            });
        }); };
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        load();
        // NOTE(MH): See note at the top of the file regarding "useEffect dependencies".
    }, __spreadArrays([state.ledger, state.reloadToken, template], (queryDeps !== null && queryDeps !== void 0 ? queryDeps : [])));
    return result;
}
exports.useQuery = useQuery;
/**
 * React Hook for a lookup by key against the `/v1/fetch` endpoint of the JSON API.
 *
 * @typeparam T The contract template type of the query.
 * @typeparam K The contract key type of the query.
 * @typeparam I The template id type.
 *
 * @param template The template of the contracts to fetch.
 * @param keyFactory A function returning the contract key of the contracts to fetch.
 * @param keyDeps Dependencies of this hook (for which the fetch is reexecuted on change).
 *
 * @return The fetched contract.
 */
function useFetchByKey(template, keyFactory, keyDeps) {
    var _this = this;
    var state = useDamlState();
    var _a = react_1.useState({ contract: null, loading: false }), result = _a[0], setResult = _a[1];
    react_1.useEffect(function () {
        var key = keyFactory();
        setResult({ contract: null, loading: true });
        var load = function () { return __awaiter(_this, void 0, void 0, function () {
            var contract;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, state.ledger.fetchByKey(template, key)];
                    case 1:
                        contract = _a.sent();
                        setResult({ contract: contract, loading: false });
                        return [2 /*return*/];
                }
            });
        }); };
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        load();
        // NOTE(MH): See note at the top of the file regarding "useEffect dependencies".
    }, __spreadArrays([state.ledger, state.reloadToken, template], (keyDeps !== null && keyDeps !== void 0 ? keyDeps : [])));
    return result;
}
exports.useFetchByKey = useFetchByKey;
function useStreamQuery(template, queryFactory, queryDeps) {
    var _a = react_1.useState({ contracts: [], loading: false }), result = _a[0], setResult = _a[1];
    var state = useDamlState();
    react_1.useEffect(function () {
        setResult({ contracts: [], loading: true });
        var query = queryFactory ? queryFactory() : undefined;
        console.debug("mount useStreamQuery(" + template.templateId + ", ...)", query);
        var stream = state.ledger.streamQuery(template, query);
        stream.on('live', function () { return setResult(function (result) { return (__assign(__assign({}, result), { loading: false })); }); });
        stream.on('change', function (contracts) { return setResult(function (result) { return (__assign(__assign({}, result), { contracts: contracts })); }); });
        stream.on('close', function (closeEvent) {
            console.error('useStreamQuery: web socket closed', closeEvent);
            setResult(function (result) { return (__assign(__assign({}, result), { loading: true })); });
        });
        return function () {
            console.debug("unmount useStreamQuery(" + template.templateId + ", ...)", query);
            stream.close();
        };
        // NOTE(MH): See note at the top of the file regarding "useEffect dependencies".
    }, __spreadArrays([state.ledger, template], (queryDeps !== null && queryDeps !== void 0 ? queryDeps : [])));
    return result;
}
exports.useStreamQuery = useStreamQuery;
/**
 * React Hook to query the ledger. Same as useStreamQuery, but query by contract key instead.
 *
 * @typeparam T The contract template type of the query.
 * @typeparam K The contract key type of the query.
 * @typeparam I The template id type.
 *
 * @param template The template of the contracts to match.
 * @param queryFactory A function returning a contract key.
 * @param queryDeps The dependencies of the query (for which a change triggers an update of the result)
 *
 * @return The matching (unique) contract.
 */
function useStreamFetchByKey(template, keyFactory, keyDeps) {
    var _a = react_1.useState({ contract: null, loading: false }), result = _a[0], setResult = _a[1];
    var state = useDamlState();
    react_1.useEffect(function () {
        setResult({ contract: null, loading: true });
        var key = keyFactory();
        console.debug("mount useStreamFetchByKey(" + template.templateId + ", ...)", key);
        var stream = state.ledger.streamFetchByKey(template, key);
        stream.on('change', function (contract) { return setResult(function (result) { return (__assign(__assign({}, result), { contract: contract })); }); });
        stream.on('close', function (closeEvent) {
            console.error('useStreamFetchByKey: web socket closed', closeEvent);
            setResult(function (result) { return (__assign(__assign({}, result), { loading: true })); });
        });
        setResult(function (result) { return (__assign(__assign({}, result), { loading: false })); });
        return function () {
            console.debug("unmount useStreamFetchByKey(" + template.templateId + ", ...)", key);
            stream.close();
        };
        // NOTE(MH): See note at the top of the file regarding "useEffect dependencies".
    }, __spreadArrays([state.ledger, template], keyDeps));
    return result;
}
exports.useStreamFetchByKey = useStreamFetchByKey;
/**
 * React Hook to reload all active queries.
 */
exports.useReload = function () {
    var state = useDamlState();
    return function () { return state.triggerReload(); };
};
//# sourceMappingURL=hooks.js.map